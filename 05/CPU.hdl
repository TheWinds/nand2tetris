// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    // Mux before A-Register
    Mux16(a=instruction,b=outALU,sel=instruction[15],out=inARegister);
    
    // A-Register
    // load when it is a A-Instruction or (C-Instruction and d1 == 1)
    Not(in=instruction[15],out=isAIns);
    And(a=instruction[15],b=instruction[5],out=isCInsAndD1);
    Or(a=isAIns,b=isCInsAndD1,out=loadARegister);
    ARegister(in=inARegister,load=loadARegister,out=outARegister,out[0..14]=addressM,out[0..14]=nextAddress);
    
    // Mux before input M or A
    // if a = 0 choose A else choose M
    Mux16(a=outARegister,b=inM,sel=instruction[12],out=inALUAOrM);

    // D-Register
    // load when it is C-Instruction and d2 == 1
    And(a=instruction[15],b=instruction[4],out=isCInsAndD2);
    DRegister(in=outALU,load=isCInsAndD2,out=inALUD);

    // ALU
    ALU(x=inALUD,y=inALUAOrM,out=outALU,out=outM,zr=isALUOutZr,ng=isALUOutNg,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6]);
    // if it is C-Instruction and d3 == 1 write to memory
    And(a=instruction[15],b=instruction[3],out=writeM);

    // PC 
    // <= 0
    Or(a=isALUOutZr,b=isALUOutNg,out=isALUOutLE);
    // >= 0 
    Not(in=isALUOutNg,out=isALUOutGE);
    //  > 0
    Not(in=isALUOutLE,out=isALUOutGT);
    // != 0
    Not(in=isALUOutZr,out=isALUOutNE);
    Mux(a=false,b=isALUOutGT,sel=instruction[0],out=j1);
    Mux(a=isALUOutZr,b=isALUOutGE,sel=instruction[0],out=j2);
    Mux(a=isALUOutNg,b=isALUOutNE,sel=instruction[0],out=j3);
    Mux(a=isALUOutLE,b=true,sel=instruction[0],out=j4);
    Mux(a=j1,b=j2,sel=instruction[1],out=j5);
    Mux(a=j3,b=j4,sel=instruction[1],out=j6);
    Mux(a=j5,b=j6,sel=instruction[2],out=isLoadIns);
    //Mux8Way(a=false,b=isALUOutGT,c=isALUOutZr,d=isALUOutGE,
    //e=isALUOutNg,f=isALUOutNE,g=isALUOutLE,h=true,
    //sel[0]=instruction[0],sel[1]=instruction[1],sel[2]=instruction[2],out=isLoadIns);
    And(a=instruction[15],b=isLoadIns,out=isJMP);

    PC(in[15]=false,in[0..14]=nextAddress,reset=reset,load=isJMP,inc=true,out[0..14]=pc);
}